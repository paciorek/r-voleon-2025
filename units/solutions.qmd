---
title: "Solutions"
format:
  html:
    theme: cosmo
    css: ../assets/styles.css
    toc: true
    code-copy: true
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
execute:
  freeze: auto
---

```{r chunksetup, include=FALSE, cache=TRUE} 
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
if(Sys.getenv('USER') == 'paciorek') rm(list = ls())
library(gapminder)
```

# Unit 1: Data Structures and Manipulations


## Basics

1) Extract the 5th row from the gapminder dataset.

```{r}
#| eval: false
gapminder[5, ]
```

2) Extract the last row from the gapminder dataset. 

```{r}
#| eval: false
gapminder[ nrow(gapminder) , ]
```

3) Create a boolean (TRUE/FALSE) vector indicating whether total country GDP is greater than 1 trillion dollars. When entering 1 trillion, use R's scientific notation.

```{r}
#| eval: false
large <- gapminder$gdpPercap * gapminder$pop > 1e12
```

4) Count the number of gdpPercap values greater than 50000 in the gapminder dataset.

```{r}
#| eval: false
sum(gapminder$gdpPercap > 50000)
```

5) Set all of the gdpPercap values greater than 50000 to NA. You should probably first copy the `gapminder` object and work on the copy so that the dataset is unchanged, so that you preserve the original data to use later.

```{r}
#| eval: false
gapminder2 <- gapminder
gapminder2$gdpPercap[ gapminder2$gdpPercap > 50000 ] <- NA
```

6) Consider the first row of the gapminder dataset, which has Afghanistan for 1952. How do I create a string "Afghanistan-1952" using `gap$country[1]` and `gap$year[1]`?

```{r}
#| eval: false
paste(gapminder$country[1], gapminder$year[1], sep = "-")
```

## Using the ideas

7) Create a character string using `paste()` that tells the user how many rows there are in the data frame - do this programmatically such that it would work for any data frame regardless of how many rows it has. The result should look like this: "There are 1704 rows in the dataset"

```{r}
#| eval: false
paste("There are ", nrow(gapminder), " rows in the dataset.", sep = "")
```

8) If you didn't do it this way already in problem #2, extract the last row from the gapminder dataset without typing the number '1704'.

```{r}
#| eval: false
gapminder[ nrow(gapminder), ]
```

9) Create a boolean vector indicating if the life expectancy is greater than 75 and the gdpPercap is less than 10000 and calculate the proportion of all the records these represent.

```{r}
#| eval: false
economical <- gapminder$lifeExp > 75 & gapminder$gdpPercap < 10000
mean(economical)   # sum(economical) / length(economical)
```

10) Use that vector to create a new data frame that is a subset of the original data frame.

```{r}
#| eval: false
sub <- gapminder[ economical , ]
```

11) Consider the attributes of the gapminder dataset. What kind of R object is the set of attributes?

```{r}
#| eval: false
attributes(gapminder)
names(attributes(gapminder))
class(attributes(gapminder))
```

## Advanced

12) Consider the following regression model.  Figure out how to extract the $R^2$ and residual standard error and store in new R variables. 

```{r}
#| eval: false
mod <- lm(lifeExp ~ log(gdpPercap), data = gapminder)
summ <- summary(mod)
r2 <- summ$r.squared
sigError <- summ$sigma
```


13) Create row names for the data frame based on concatenating the Continent, Country, and Year fields.

```{r}
#| eval: false
head(gapminder)
nm <- paste(gapminder$continent, gapminder$country, gapminder$year, sep = "-")
attributes(gapminder)$row.names <- nm
head(gapminder)
```

# Unit 2: Calculations and Efficiency


## Basics

1) Create a vector of GDP per capita in units of Euros rather than dollars.

```{r}
#| eval: false
EurosPerDollar <- 1.1  
gdpPercap_euro <- gapminder$gdpPercap * EurosPerDollar
c(gdpPercap_euro[1], gapminder$gdpPercap[1])
```

2) Create a vector that concatenates the country and year to create a 'country-year' variable in a vectorized way using the string processing functions.

```{r}
#| eval: false
gapminder$country_year <- paste(gapminder$country, gapminder$year, sep = "-")
```

3) Use `table()` to figure out the number of countries available for each continent.

```{r}
#| eval: false
table(gapminder2007$continent)
```

## Using the ideas

4) Explain the steps of what this code is doing: `tmp <- gapminder[ , -which(names(gapminder) == "continent")]`.

```{r}
#| eval: false
tmp <- gapminder[ , -which(names(gapminder) == "continent")]

# column names
names(gapminder)
# logical indicating which = 'continent'
names(gapminder) == "continent"
# index of the continent column
which(names(gapminder) == "continent")
# exclude that column
gapminder[ , -which(names(gapminder) == "continent")] 
```

5) Compute the number of NAs in each column of the gapminder dataset using `sapply()` and making use of the `is.na()` function. It's possible to do this without writing a function.

```{r}
#| eval: false
sapply(gapminder, function(x) sum(is.na(x)))

## or without writing a function
colSums(sapply(gapminder, is.na))
```

6) Suppose we have two categorical variables and we conduct a hypothesis test of independence. The chi-square statistic is: 

$$
\chi^2 = \sum_{i=1}^{n}\sum_{j=1}^{m} \frac{(y_{ij} - e_{ij})^2}{e_{ij}}, 
$$ 

where $e_{ij} = \frac{y_{i\cdot} y_{\cdot j}}{y_{\cdot \cdot}}$, with $y_{i\cdot}$ the sum of the values in the i'th row, $y_{\cdot j}$ the sum of values in the j'th column, and $y_{\cdot\cdot}$ the sum of all the values. Suppose I give you a matrix in R with the $y_{ij}$ values. 

You can generate a test matrix as: 
```{r, eval=FALSE}
y <- matrix(sample(1:10, 12, replace = TRUE), 
nrow = 3, ncol = 4)
```

Compute the statistic without *any* loops as follows:

  - First, assume you have the *e* matrix. How do you compute the statistic without loops as a function of `y` and `e`?
  - How can you construct the *e* matrix? Hint: the numerator of *e* is just an *outer product* for which the `outer()` function can be used.

```{r}
#| eval: false
y <- matrix(sample(1:10, 12, replace = TRUE), 
nrow = 3, ncol = 4)

yidot <- rowSums(y)
ydotj <- colSums(y)
e <- outer(yidot, ydotj) / sum(y)

chi2 <- sum( (y - e)^2 / e)
# chi2 <- sum(colSums( (y-e)^2 / e ))
```

## Advanced 

7) Here's a cool trick using `sapply` to pull off a particular element of a list of lists:

```{r}
params <- list(a = list(mn = 7, sd = 3), b = list(mn = 6,sd = 1), 
  c = list(mn = 2, sd = 1))
  
sapply(params, "[[", 1)
```

Explain what that does and why it works.

Hint:
```{r}
test <- list(5, 7, 3)
test[[2]]
# `[[`(test, 2)  # need it commented or R Markdown processing messes it up...

# `+`(3, 7)
```

```{r}
#| eval: false
params[[1]][[1]]  # Same as:  `[[`(params[[1]], 1)
params[[2]][[1]]  # Same as:  `[[`(params[[3]], 1)
params[[3]][[1]]  # Same as:  `[[`(params[[3]], 1)
# etc.
```

# Unit 3: Programming Concepts and Tools

## Basics

1) Write an R function that will take an input vector and set any negative
values in the vector to zero.

```{r}
#| eval: false
truncate <- function(x) {
   x[x < 0] <- 0
   return(x)
}
```  

## Using the ideas

2) Write an R function that will take an input vector and set any value below a
threshold to be the value of threshold. Optionally, the function should instead
set values above a threshold to the value of the threshold.

```{r}
#| eval: false
truncate <- function(x, thresh = 0, below = TRUE) {
   if(below) {
      x[x < thresh] <- thresh
   } else x[x > thresh] <- thresh
   return(x)
}
```  


3) Augment your function so that it checks that the input is a numeric vector
and return an error if not. (See the help information for `stop()` (or `stopifnot()`.)

```{r}
#| eval: false
truncate <- function(x, thresh = 0, below = TRUE) {
   if(!is.numeric(x)) 
      stop("`x` must be a numeric vector")
   if(below) {
      x[x < thresh] <- thresh
   } else x[x > thresh] <- thresh
   return(x)
}
```  


4) Figure out what `invisible()` does and why it is useful when writing
functions. Use `invisible()` in your function from just above.

```{r}
#| eval: false
truncate <- function(x, thresh = 0, below = TRUE) {
   if(!inherits(x, 'numeric'))
      stop("`x` must be a numeric vector")
   if(below) {
      x[x < thresh] <- thresh
   } else x[x > thresh] <- thresh
   invisible(x)
}

x <- rnorm(20)
truncate(x)   # No output!
```  


## Advanced

5) Explore scoping in the following code. Explain why the result is 11 and not 3. Note that `funGenerator()` returns a function as the return object,
consistent with the idea that functions are objects in R. This is an example of
what is called a *closure* in R. Basically, the function contains object(s)
enclosed with and accessible to the function.

   ```{r, closure-scoping}
   funGenerator <- function(x) {
     x <- 10
     g <- function(y) {
       return(x + y)
     }
     return(g)
   }

   x <- 2
   f <- funGenerator()
   f(1)

   # `f` is a copy of `g`, which was created in the scope of `funGenerator`, not in the global environment.
   ls(environment(f))
   environment(f)$x
   ```

# Unit 4: Data Wrangling

## `dplyr`

1) Use `dplyr` to create a data frame containing the median `lifeExp` for each continent

   ```{r}
   #| eval: false
   gapminder_median_lifeExp <- gapminder %>%
   group_by(continent) %>%
   summarize(med_lifeExp = median(lifeExp))
   ```

2) Use `dplyr` to add a column to the gapminder dataset that contains the total population of the continent of each observation in a given year. For example, if the first observation is Afghanistan in 1952, the new column would contain the population of Asia in 1952.

   ```{r}
   #| eval: false
   gapminder_pop_continent <- gapminder %>%
   group_by(continent, year) %>%
   mutate(continent_pop = sum(pop))
   ```

3) Use `dplyr` to add a column called `gdpPercap_diff` that contains the difference between the observation's `gdpPercap` and the mean `gdpPercap` of the continent in that year. Arrange the data frame by the column you just created, in descending order (so that the relatively richest country/years are listed first)

   ```{r}
   #| eval: false
   gapminder_rel_gdp <- gapminder %>%
   group_by(continent, year) %>%
   mutate(gdpPercap_diff = gdpPercap - mean(gdpPercap)) %>%
   arrange(desc(gdpPercap_diff))
   ```

## `tidyr`

4) Subset the results from question #3 to select only the `country`, `year`, and `gdpPercap_diff` columns. Use tidyr put it in wide format so that countries are rows and years are columns.

   Hint: you'll probably see a message about a missing grouping variable. If you don't want continent included, you can pass the output of problem 3 through `ungroup()` to get rid of the continent information.

   ```{r}
   #| eval: false
   ## First, redo question 3 code, without arranging by gdp,
   ## as that would mess up the order of the columns in the 'wide' result.
   gapminder_rel_gdp <- gapminder %>%
   group_by(continent, year) %>%
   mutate(gdpPercap_diff = gdpPercap - mean(gdpPercap))

   ## Now convert to wide format.
   gapminder_wider <- gapminder_rel_gdp %>% 
   select(country, year, gdpPercap_diff) %>%
   pivot_wider(names_from = year, values_from = gdpPercap_diff) 
   ```

## `data.table`

5) Compare timing of some operations on the airline dataset when using `dtplyr` with `lazy_air` versus directly applying dplyr syntax to the `air` data.table obect.

   No solution provided.

# Unit 5: Graphics

## Basics

1) Plot a histogram of life expectancy. 

```{r}
#| eval: false
ggplot(data = gapminder, aes(x = lifeExp)) + geom_histogram()
```

2) Plot the gdp per capita against population. Put the x-axis on the log scale.

```{r}
#| eval: false
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10() 
```

3) Clean up your scatterplot with a title and axis labels. Output it as a PDF and see if you'd be comfortable with including it in a report/paper.

```{r}
#| eval: false
pdf('readAllAboutIt.pdf', height = 5, width = 5)
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10() +
  ggtitle("Life expectancy vs. per capita GDP") + xlab(label = "GDP per capita (dollars)") +
  ylab(label = "life expectancy (years)")
dev.off()
```

## Using the ideas

4) Create a trellis plot of life expectancy by gdpPercap scatterplots, one subplot per continent. Use a 2x3 layout of panels in the plot. Now have the size of the points vary with population. Use `coord_cartesian()` (or `scale_x_continuous(`) to set the x-axis limits to be in the range from 100 to 50000.

```{r}
#| eval: false
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()  +
            facet_wrap(~continent, nrow = 2, ncol = 3)

ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop)) +
            facet_wrap(~continent, nrow = 2, ncol = 3) +
            coord_cartesian(xlim = c(100, 50000)) + 
            scale_x_continuous(trans = "log10")
```

5) Make a boxplot of life expectancy conditional on binned values of gdp per capita.

```{r}
#| eval: false
gapminder %>%
    mutate(gdpBin = cut(gdpPercap, breaks = c(0, 100, 1000, 3000, 10000, 30000, 100000))) %>% 
    ggplot(aes(x = gdpBin, y = lifeExp)) + geom_boxplot()

gapminder %>% filter(gdpPercap < 100000) %>% 
    mutate(gdpBin = cut(gdpPercap, breaks = c(0, 100, 1000, 3000, 10000, 30000, 100000))) %>% 
    ggplot(aes(x = gdpBin, y = lifeExp)) + geom_boxplot()

```


## Advanced

6) (and (7)) Create a facsimile of the [famous gapminder plot](https://s3-eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161019161829/screenshot2016.jpg) For simplicity just try to create a static image  (ignoring the 'play' button at bottom) for a single year such a 2007.

```{r}
#| eval: false
## We need the alpha set for transparency so we don't hide points....

gapminder %>% filter(year == 2007) %>% 
    ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +
            geom_point(aes(color = continent), show.legend = FALSE, alpha = 0.7) +
            geom_point(show.legend = FALSE, col = 'black', pch = 1) + 
            scale_size_continuous(range = c(1,20)) +
            scale_x_continuous(trans = scales::log_trans(2), 
                                     breaks = c(1000,2000,4000,8000,16000,32000,64000),
                                     labels = c('1000','2000','4000','8000','16k','32k','64k')) +
            scale_y_continuous(breaks = seq(40, 85, by = 5)) +
            coord_cartesian(ylim = c(35, 90)) +
            xlab("Income per person, $/year (GDP/capita)") + ylab("") +
            annotate("text", label = "Life expectancy, years", x = 700, y = 90, cex = 5) +
            annotate("text", label = "Size: Population, Color: World Regions", cex = 6, x = 100000, y = 55, srt = 90, col = 'gray') +
            theme(panel.grid = element_blank(), axis.line = element_line(), panel.background = element_blank())


## Unless we figure out some way to make sure points are overlaid
## from largest to smallest. Let's try 'arranging' from largest to smallest.
## And using some hints found online:
## https://stackoverflow.com/questions/19506630/control-point-border-thickness-in-ggplot)


gapminder %>% filter(year == 2007) %>% arrange(desc(pop)) %>% 
    ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, fill = continent)) +
                 geom_point(shape = 21, color = 'black', show.legend = FALSE) +
            scale_size_continuous(range = c(1,20)) + 
            scale_x_continuous(trans = scales::log_trans(2), 
                                     breaks = c(1000,2000,4000,8000,16000,32000,64000),
                                     labels = c('1000','2000','4000','8000','16k','32k','64k')) +
            scale_y_continuous(breaks = seq(40, 85, by = 5)) +
            coord_cartesian(ylim = c(35, 90)) + 
            xlab("Income per person, $/year (GDP/capita)") + ylab("") +
            annotate("text", label = "Life expectancy, years", x = 700, y = 90, cex = 5) +
            annotate("text", label = "Size: Population, Color: World Regions", cex = 6, x = 100000, y = 55, srt = 90, col = 'gray') +
            theme(panel.grid = element_blank(), axis.line = element_line(), panel.background = element_blank())
```

# Unit 6: Basic Analysis/Useful Packages

## Basics

1) Generate 100 random Poisson values with a population mean of 5. How close is the mean of those 100 values to the value of 5?

```{r}
#| eval: false
popMean <- 5
x <- rpois(100, popMean)
mean(x) - popMean
```

2) What is the 95th percentile of a chi-square distribution with 1 degree of freedom?

```{r}
#| eval: false
qchisq(0.95, 1)
```

3) What's the probability of getting a value greater than 5 if you draw from a standard normal distribution? What about a t distribution with 1 degree of freedom?

```{r}
#| eval: false
1 - pnorm(5)  # pnorm(5, upper.tail = TRUE)
1 - pt(5, df = 1)
```

## Using the ideas

4) Fit two linear regression models from the gapminder data, where the outcome is `lifeExp` and the explanatory variables are `log(pop)`, `log(gdpPercap)`, and `year`. In one model, treat `year` as a numeric variable. In the other, factorize the `year` variable. How do you interpret each model?

```{r}
#| eval: false
reg1 <- lm(lifeExp ~ log(gdpPercap) + log(pop) + year, 
                data=gapminder)
## here we assume a linear relationship of gdp with year
## this is not flexible but allows us to fit the model with less data

reg2 <- lm(lifeExp ~ log(gdpPercap) + log(pop) + factor(year), 
                data = gapminder)
## here we assume a completely arbitrary relationship of gdp with year
## we need enough data in each year to be able to reasonably estimate the average lifeExp for that year, given the other explanatory variables
```

5) Consider the code where we used `sample()`.  Initialize a storage vector of 500 zeroes. Set up a bootstrap using a for loop, with 500 bootstrap datasets. Here are the steps within each iteration:

  - resample with replacement a new dataset of the same size as the actual `gapminder` dataset
  - assign the value of the mean of the life expectancy for the bootstrap dataset into the storage vector
  - repeat

Now plot a histogram of the 500 values - this is an estimate of the sampling distribution of the sample mean. 

```{r}
#| eval: false
nBoot <- 500
vals <- rep(0, nBoot)

for(i in seq_len(nBoot)) { 
      smp <- sample(seq_len(nrow(gapminder)), replace = TRUE) 
      vals[i] <- mean(gapminder$lifeExp[smp], na.rm = TRUE)
}
hist(vals)

## bootstrap based standard error (s.d. of sampling distribution)
se_boot <- sd(vals)

## standard error using usual sigma/sqrt(n) calculation
n <- sum(!is.na(gapminder$lifeExp))
se_norm <- sd(gapminder$lifeExp, na.rm = TRUE) / sqrt(n)
```

6) Modify the GAMs of lifeExp on gdpPercap and set `k` to a variety of values and see how the estimated relationships change. What about the estimated uncertainties?

```{r}
#| eval: false
mod <- gam(lifeExp ~ s(gdpPercap, k = 30) + s(year, k = 10), data = gapminder)
plot(mod)
summary(mod)

mod <- gam(lifeExp ~ s(gdpPercap, k = 60) + s(year, k = 10), data = gapminder)
plot(mod)
summary(mod)  # edf values are about the same as previously so 'k' is not constraining

mod <- gam(lifeExp ~ s(gdpPercap, k = 4) + s(year, k = 3), data = gapminder)
plot(mod)
# Now the edf is much lower (and R^2 has decreased).
# Note that uncertainty is decreased under the nearly linear fit for year.
```

## Advanced 

7) Fit a logistic regression model where the outcome is whether `lifeExp` is greater than or less than 60 years, exploring the use of different predictors.

```{r}
#| eval: false
library(dplyr)
gapminder2 <- gapminder %>%
  mutate(sign = ifelse(lifeExp > 60, 1, 0))

reg_logit <- glm(sign ~ log(gdpPercap) + log(pop),
                family = binomial(link = "logit"), data = gapminder2)
```

8) Suppose you wanted to do 10-fold cross-validation for some sort of regression model fit to the *gapminder* dataset. Write some R code that produces a field in the dataset that indicates which fold each observation is in. Ensure each of the folds has an equal (or as nearly equal as possible if the number of observations is not divisible by 10) number of observations. Hint: consider the *times* argument to the `rep()` function. (If you're not familiar with 10-fold cross-validation, it requires one to divide the dataset into 10 subsets of approximately equal size.)

```{r}
#| eval: false
nFolds <- 10
n <- nrow(gapminder)
fold_size <- rep(round(n / nFolds), nFolds)
fold_size[nFolds] <- n - (nFolds - 1)*fold_size[1]

fold <- rep(1:nFolds, times = fold_size)
table(fold)
set.seed(1)
gapminder$fold <- sample(fold, replace = TRUE)
```

9) Write some code to demonstrate the central limit theorem. Generate many different replicates of samples of size `n` from a skewed or discrete distribution and show that if `n` is big enough, the distribution of the means (of each sample of size `n`) looks approximately normal in a histogram. Do it without any looping (using techniques from earlier modules)! I.e., I want you to show that if you have a large number (say 10,000) of means, each mean being the mean of `n` values from a distribution, the distribution of the means looks approximately normal if `n` is sufficiently big.

```{r}
#| eval: false
n <- 100
nReps <- 10000
data <- matrix(rpois(n*nReps, 3), ncol = nReps)
mns <- colMeans(data)
par(mfrow = c(1, 2))
hist(mns)
qqnorm(mns)
```