---
title: "Graphics with ggplot"
format:
  html:
    theme: cosmo
    css: ../assets/styles.css
    toc: true
    code-copy: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-tools: true
execute:
  freeze: auto
---

```{r, chunksetup}
#| include: false
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
rm(list=ls())
library(gapminder)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(reshape2)
library(patchwork)
```

# Overview

Most users use either base R graphics or ggplot (in the `ggplot2` package). We'll focus on ggplot after a brief intro of base R graphics.

And here's some motivation - we can produce a plot like [this](gapminder.pdf) with a few lines of code.

(Compare to the [famous gapminder plot](https://s3-eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161019161829/screenshot2016.jpg).)

In 2018 or so, producing my version of the plot took me some time experimenting and Googling. I suspect one could do it with a ChatBot quite quickly now. But I'd be curious what errors there would be and how much debugging and knowledge of ggplot would be needed. See Problem 6 of the Breakout.


# Base graphics

The general call for base plot looks something like this:

```{r, eval=FALSE}
plot(x = , y = , ...)
```
Additional parameters can be passed in to customize the plot:

* `type`: scatterplot? lines? etc
* `main`: a title
* `xlab`, `ylab`: x-axis and y-axis labels
* `col`: color, either a string with the color name or a vector of color names for each point

More layers can be added to the plot with additional calls to `lines`, `points`, `text`, etc.

```{r, fig.cap = ""}
gapChina <- gapminder %>% filter(country == "China")
plot(gapChina$year, gapChina$gdpPercap)
plot(gapChina$year, gapChina$gdpPercap, type = "l",
     main = "China GDP over time",
     xlab = "Year", ylab = "GDP per capita") # with updated parameters
points(gapChina$year, gapChina$gdpPercap, pch = 16)
points(x = 1977, y = gapChina$gdpPercap[gapChina$year == 1977],
       col = "red", pch = 16)
```

## Other plot types in base graphics

These are a variety of other types of plots you can make in base graphics.

```{r, fig.cap = ""}
boxplot(lifeExp ~ year, data = gapminder)
hist(gapminder$lifeExp[gapminder$year == 2007])
plot(density(gapminder$lifeExp[gapminder$year == 2007]))
barplot(gapChina$pop, width = 4, names.arg = gapChina$year, 
                               main = "China population")
```

## Object-oriented plots

* Base graphics often recognizes the object type and will implement specific plot methods (see that `plot` is an S3 generic).
* ggplot generally doesn't exhibit this sort of behavior.

Here are two examples:

```{r, fig.cap=" "}
gap_lm <- lm(lifeExp ~ log(gdpPercap) + year, data = gapminder)

# Calls plotting method for class of the dataset ("data.frame")
plot(gapminder[,c('pop','lifeExp','gdpPercap')])
```

```{r, fig.cap=""}
# Calls plotting method for class of gap_lm object ("lm"), print first two plots only
plot(gap_lm, which=1:2)
```

## Pros/cons of base graphics vs. ggplot

Base graphics is:

a) good for exploratory data analysis and sanity checks

b) inconsistent in syntax across functions: some take x,y while others take formulas

c) default plotting parameters are ugly, and it can be difficult to customize

d) that said, one can do essentially anything in base graphics with some work

ggplot2 is:

a) generally more elegant

b) more syntactically logical (and therefore simpler, once you learn it)

c) better at grouping

d) easy to interface with maps

We'll focus on `ggplot2` as it is very powerful, very widely-used and allows one to produce very nice-looking graphics without a lot of coding.

# ggplot

## Basic usage: `ggplot2`

The general call for `ggplot2` graphics looks something like this:

```{r, eval=FALSE}
# NOT run
ggplot(data = , mapping = aes(x = ,y = , [options])) + geom_xxxx() + ... + ... + ...
```

Note that `ggplot2` graphs in layers in a *continuing call* (hence the endless +...+...+...), which makes additional layers in the plot.

```{r, eval=FALSE}
... + geom_xxxx(mapping = aes(x = , y = ,[options]), [options]) + ... + ... + ...
```

You can see the layering effect by comparing the same graph with different colors for each layer

```{r, fig.cap=" ", warning=FALSE}
p <- ggplot(data = gapChina, aes(x = year, y = lifeExp)) +
                 geom_point(color = "red")
p
p + geom_point(aes(x = year, y = lifeExp), color = "gray") + ylab("life expectancy") +
    theme_minimal()
```

## Grammar of graphics

`ggplot2` syntax is very different from base R graphics. It's built on the **grammar of graphics**.
The basic idea is that the visualization of all data requires four items:

1) One or more **statistics** conveying information about the data (identities, means, medians, etc.)

2) A **coordinate system** that characterizes the intersections of statistics (at most two for ggplot, three for `lattice`)

3) **Geometries** that differentiate between off-coordinate variation in *kind*

4) **Scales** that differentiate between off-coordinate variation in *degree*

`ggplot2` allows the user to manipulate all four of these items through the
`stat_*`, `coord_*`, `geom_*`, and `scale_*` functions.

All of these are important to becoming a ggplot expert, but today we are going to focus on the most important to basic users and their data layers: ggplot's *geometries*.

## Some Examples

```{r, warning = FALSE, message = FALSE, fig.cap = ""}
## Scatterplot
ggplot(gapChina, aes(x = year, y = lifeExp)) + geom_point() +
                          ggtitle("China's life expectancy")
## Line (time series) plot
ggplot(gapChina, aes(x = year, y = lifeExp)) + geom_line() +
                          ggtitle("China's life expectancy")
## Boxplot
ggplot(gapminder, aes(x = factor(year), y = lifeExp)) + geom_boxplot() +
                          ggtitle("World's life expectancy")
## Histogram
gapminder2007 <- gapminder |> filter(year == 2007)
ggplot(gapminder2007, aes(x = lifeExp)) + geom_histogram(binwidth = 5) +
                          ggtitle("World's life expectancy")
```


## ggplot and tidy data

`ggplot2` plays nicely with `dplyr` and pipes. If you want to manipulate your data specifically for one plot but not save the new dataset, you can call your `dplyr` chain and pipe it directly into a ggplot call.

```{r, fig.cap = "", fig.show = "hold"}
# This combines the subsetting and plotting into one step
gapminder |> filter(year == 2007) |> 
        ggplot(aes(x = lifeExp)) + geom_histogram(binwidth = 5) +
                          ggtitle("World's life expectancy")
```

Base graphics and ggplot have a big difference: ggplot **requires** your data to be in [tidy format](tidyverse.html#tidying-data). For base graphics, it can actually be helpful *not* to have your data in tidy format in some cases.


## Features of ggplot

* Allows you to add features in "layers"
* Automatically adjusts spacing and sizing as you add more layers
* Requires data to be in tidy format
* Syntax is different from base R -- there is a learning curve
* Plots are actually objects. You can assign them to a variable and do things with it (more on this later)

## An overview of syntax for various `ggplot2` geoms

We've already seen these initial ones.

These are provided for reference -- we won't spend time on each one.

::: {.callout-note title="X-Y scatter plots: `geom_point()`" collapse="true"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(gapChina, aes(x = year, y = lifeExp)) + geom_point() +
                          ggtitle("China's life expectancy")
```
:::

::: {.callout-note collapse="true" title="X-Y line plots: `geom_line()` or `geom_path()`"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(gapChina, aes(x = year, y = lifeExp)) + geom_line() +
                          ggtitle("China's life expectancy")
```
:::

::: {.callout-note collapse="true" title="Histograms: `geom_histogram()`, `geom_col()`, or `geom_bar()`"}

```{r, fig.cap=""}
gapminder2007 <- gapminder |> filter(year == 2007)
ggplot(gapminder2007, aes(x = lifeExp)) + geom_histogram(binwidth = 5) +
                          ggtitle("World's life expectancy")
```
:::

::: {.callout-note collapse="true" title="Densities: `geom_density()`, `geom_density2d()`"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(gapminder2007, aes(x = lifeExp)) + geom_density() + 
                          ggtitle("World's life expectancy")
```
:::

::: {.callout-note collapse="true" title="Boxplots: `geom_boxplot()`"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
# Notice that here, you must explicitly convert numeric years to factors
ggplot(data = gapminder, aes(x = factor(year), y = lifeExp)) +
            geom_boxplot() 
```
:::
::: {.callout-note collapse="true" title="Contour plots: `geom_contour()`"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
data(volcano) # Load volcano contour data
volcano[1:10, 1:10] # Examine volcano dataset (first 10 rows and columns)
volcano3d <- melt(volcano) # Use reshape2 package to melt the data into tidy form
head(volcano3d) # Examine volcano3d dataset (head)
names(volcano3d) <- c("xvar", "yvar", "zvar") # Rename volcano3d columns

ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
            geom_contour() 
```
:::

::: {.callout-note collapse="true" title="Tile/Image/Level plots, heatmaps: `geom_tile()`, `geom_rect()`, `geom_raster()`"}

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = volcano3d, aes(x = xvar, y = yvar, z = zvar)) +
            geom_tile(aes(fill = zvar)) 
```
:::

## "Trellis" plots

Trellis plots allow you to stratify by a variable, with one panel per categorical value. One uses either `facet_grid()` or `facet_wrap()`:
 
```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapminder, aes(x = lifeExp)) + geom_histogram(binwidth = 5) +
            facet_wrap(~year)
```

This can be quite powerful. It gives you the ability to take account of an additional variable.


## Anatomy of `aes()`

```{r, eval=FALSE}
# NOT run
ggplot(data = , mapping = aes(x = , y = , color = , linetype = , shape = , size = ))
```

These four aesthetic parameters (`color`, `linetype`, `shape`, `size`) can be used to show variation in *kind* (categories) and variation in *degree* (numeric).

Parameters passed into `aes` should be *variables* in your dataset.

Parameters passed to `geom_xxx` outside of `aes` should *not* be related to your dataset -- they apply to the whole figure.

```{r, fig.cap=" ", warning=FALSE}
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
            geom_line(aes(color = country), show.legend = FALSE)
```

Note what happens when we specify the color parameter outside of the aesthetic operator. ggplot views these specifications as invalid graphical parameters.

```{r, fig.cap=" ", warning=FALSE, error = TRUE}
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
            geom_line(color = country)
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
            geom_line(color = "country")
## This 'works' syntactically but not substantively.
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
            geom_line(color = "red")
```

**Note:** Aesthetics automatically show up in your legend. Parameters (those not mapped to a  variable in your data frame) do not!

## Using aesthetics to highlight features

### Differences in kind

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
## color as the aesthetic to differentiate by continent
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(color = continent)) + scale_x_log10()

## point shape as the aesthetic to differentiate by continent
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(shape = continent)) + scale_x_log10()

## line type as the aesthetic to differentiate by country
gapOceania <- gapminder |> filter(continent %in% 'Oceania')
ggplot(data = gapOceania, aes(x = year, y = lifeExp)) +
            geom_line(aes(linetype = country)) + scale_x_log10()
```

### Differences in degree

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
## point size as the aesthetic to differentiate by population
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(size = pop)) + scale_x_log10()

## color as the aesthetic to differentiate by population
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(color = pop)) + scale_x_log10() +
            scale_color_gradient(low = 'lightgray', high = 'black')
```

### Multiple non-coordinate aesthetics (differences in kind using color, degree using point size)

```{r, fig.cap=" ", warning=FALSE}
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(size = pop, color = continent)) + scale_x_log10()
```

::: {.callout-tip title="Question"}

How many variables have we represented? If we used a trellis plot we could represent yet another variable!

:::

## Using aesthetics: quick quiz

::: {.callout-tip title="Question"}

Which of these ggplot2 calls will work (in the sense of not giving an error, not in the sense of being a useful plot)?

1) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp)) |> geom_point()`
2) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp))`
3) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point()`
4) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp, shape = 'a')) + geom_point()`
5) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(shape = country), show.legend = FALSE)`
6) `gapminder |> ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point(shape = 'a', show.legend = FALSE)`
7) `gapminder |> ggplot() + geom_point(aes(x = gdpPercap, y = lifeExp, shape = country), show.legend = FALSE)`
:::

## Where do I put `aes()`? (optional)

As seen in the code snippets in the quick quiz, one can put `aes()` in the original `ggplot()` call or in latter `geom_x()` calls. What's the difference?

- If one puts `aes()` in `ggplot()`, it affects all subsequent calls that are part of the same ggplot expression.
- If one puts `aes()` in a `geom_x()`, it affects only that particular component of the plotting.

So where you put it affects the "scope" of what it affects.

```{r}
gapminder |> filter(continent == "Oceania") |>
          ggplot(aes(x = year, y = gdpPercap, color = country)) +
          geom_line() + geom_point()

gapminder |> filter(continent == "Oceania") |>
          ggplot(aes(x = year, y = gdpPercap)) +
          geom_line(aes(color = country)) + geom_point()

# Yikes, this doesn't work right:
gapminder |> filter(continent == "Oceania") |>
          ggplot(aes(x = year, y = gdpPercap)) +
          geom_point(aes(color = country)) + geom_line()
```


## Scaling Aesthetics

Aesthetics are handled by their very own `scale` functions which allow you to set
the limits, breaks, transformations, and any palletes that might determine how you want your 
data plotted. ggplot includes a number of helpful default scale functions. For example:

  - `scale_x_log10` that can transform your data on the fly
  - `scale_color_viridis` uses palettes from the `viridis` package specifically designed to "make plots that are pretty, better represent your data, easier to read by those with colorblindness, and print well in grey scale."

For example, our data might be better represented using a log10 transformation of per capita GDP:
```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(color = continent)) +
  scale_x_log10()

```


And perhaps we want colors that are a little different:
```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(color = continent)) +
  scale_x_log10() +
  scale_color_viridis_d()
```

Or perhaps we want to set your palettes and breaks or labels manually: 

```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(aes(color = continent)) +
  scale_x_log10(labels = scales::dollar) +
  scale_color_manual("The continents", 
                     values = c("red", "blue", "green", "yellow", "#800080")) # hex codes work!
```

For more info about setting scales in ggplot and for more helper functions
consider diving into the `scales` 
package which is the backend to much of the scales functionality in ggplot

## Fine tuning your plot

`ggplot` handles  many plot options as additional layers.

### Labels

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) + geom_point() +
  xlab(label = "GDP per capita") +
  ylab(label = "Life expectancy") +
  ggtitle(label = "Gapminder") 
```

Or even more simply use the `labs()` function

```{r, eval=FALSE}
ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) + geom_point() +
  labs(x = "GDP per capita", y = "Life expectancy", title = "Gapminder")
```

### Axis and point scales

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point() 
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(size=3) 
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(size=1) 
```

### Colors
```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(color = colors()[11]) 
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(color = "red") 
```

### Point Styles and Widths

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(shape = 3) 
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(shape = "w") 
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
            geom_point(shape = "$", size=5) 
```

### Line Styles and Widths

```{r, fig.cap=" ", warning=FALSE, fig.show = "hold"}
ggplot(data = gapChina, aes(x = year, y = lifeExp)) +
            geom_line(linetype = 1) 
ggplot(data = gapChina, aes(x = year, y = lifeExp)) +
            geom_line(linetype = 2) 
ggplot(data = gapChina, aes(x = year, y = lifeExp)) +
            geom_line(linetype = 5, size = 2) 
```

## Themes with `ggplot2` (optional)

Elements of the plot *not associated with geometries* can be adjusted using ggplot
*themes*. 

There are some "complete" themes already included with the package:

- `theme_gray()` (the default)
- `theme_minimal()`
- `theme_bw()`
- `theme_light()`
- `theme_dark()`
- `theme_classic()`

But in additional to these, you can tweak just about any element of your plot's 
appearance using the `theme()` function. 

For instance, perhaps you want to move the legend from the left to the bottom of 
your plot, this would be part of the plot theme. Note how you can add options to a complete theme already in the plot:

```{r}
gapminder |>
  filter(country %in% c("China", "Turkey", "Italy")) |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_line(aes(color = country)) +
  theme_minimal() + 
  theme(legend.position = "bottom")
```

## Combining Multiple Plots

ggplot graphs can be combined using the `grid.arrange()` function in the `gridExtra` package. This takes advantage of each plot being an object.

```{r, warning=FALSE, fig.cap=" "}
library(gridExtra)

# Create 3 plots to combine in a table
plot1 <- ggplot(data = gapminder2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point() + scale_x_log10() + annotate('text', 150, 80, label = '(a)')
plot2 <- ggplot(data = gapminder2007, aes(x = pop, y = lifeExp)) +
  geom_point() + scale_x_log10() + annotate('text', 1.8e5, 80, label = '(b)')
plot3 <- ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
      geom_line(aes(color = country), show.legend = FALSE) +
      annotate('text', 1951, 80, label = '(c)')


# Call grid.arrange
grid.arrange(plot1, plot2, plot3, nrow=3, ncol = 1)
```

## `patchwork`: Combining Multiple ggplot plots (optional)

* The `patchwork` package may be used to combine multiple ggplot plots using
  a small set of operators similar to the pipe.
* This requires less syntax than using `gridExtra` and allows complex
  arrangements to be built nearly effortlessly.

```{r, warning=FALSE, fig.cap=" ", fig.width=12}
library(patchwork)

# use the patchwork operators
# stack plots horizontally
plot1 + plot2 + plot3
```

```{r, warning=FALSE, fig.cap=" ", fig.width=12}
# stack plots vertically
plot1 / plot2 / plot3
```

```{r, warning=FALSE, fig.cap=" ", fig.width=12}
# side-by-side plots with third plot below
(plot1 | plot2) / plot3
```

```{r, warning=FALSE, fig.cap=" ", fig.width=12}
# side-by-side plots with a space in between, and a third plot below
(plot1 | plot_spacer() | plot2) / plot3
```

```{r, warning=FALSE, fig.cap=" ", fig.width=12}
# stack plots vertically and alter with a single "gg_theme"
(plot1 / plot2 / plot3) & theme_bw()
```

::: {.callout-tip title="ggplot extensions"}

`patchwork` is an example of a ggplot2 extension package of which there are many! One of the benefits to learning and using ggplot is that there is a huge community of developers that build separate graphics packages that generally use the same syntax to extend the `ggplot2` functionality into things like animation and 3D plotting! [Check them out here](http://www.ggplot2-exts.org/gallery/).

:::

# Exporting

There are two basic image formats: raster and vector. 

## **Raster/Bitmap** (.png, .jpeg)

Every pixel of a plot contains its own separate coding:

 - sensible for gridded/raster output
 - **bad if you want to resize the image**
 - file size depends on pixel resolution

```{r, eval=FALSE}
jpeg(filename = "example.jpg", width = , height =)
plot(x,y)
dev.off()
```

## **Vector** (.pdf, .ps)

Every element of a plot is encoded as a representation of its shape

 - **great for resizing**
 - image files with many elements can be very large.

```{r, eval=FALSE}
pdf(file = "example.pdf", width = , height =)
plot(x,y)
dev.off()
```

## Exporting with `ggplot`

```{r, eval=FALSE}
# Assume we saved our plot as an object called `plot1`.

ggsave(filename = "example.pdf", plot = plot1, scale = , width = , height = )
```

# Breakout

These questions ask you to work with the gapminder dataset.

## Basics

1) Plot a histogram of life expectancy. 

2) Plot the gdp per capita against population. Put the x-axis on the log scale.

3) Clean up your scatterplot with a title and axis labels. Output it as a PDF and see if you'd be comfortable with including it in a report/paper.

## Using the ideas

4) Create a trellis plot of life expectancy by gdpPercap scatterplots, one subplot per continent. Use a 2x3 layout of panels in the plot. Now have the size of the points vary with population. Use `coord_cartesian()` (or `scale_x_continuous(`) to set the x-axis limits to be in the range from 100 to 50000.

5) Make a boxplot of life expectancy conditional on binned values of gdp per capita.

## Advanced

6) Try to create a facsimile of the [famous Gapminder plot](https://s3-eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161019161829/screenshot2016.jpg) without looking at my code by using a ChatBot, providing it with information about the gapminder dataframe. For simplicity just try to create a static image  (ignoring the 'play' button at bottom) for a single year such as 2007.

7) Alternatively (to #6), using the data for 2007, but *without* using a ChatBot, recreate as much as you can of the [famous Gapminder plot](https://s3-eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161019161829/screenshot2016.jpg). For simplicity just try to create a static image  (ignoring the 'play' button at bottom) for a single year such as 2007. 

