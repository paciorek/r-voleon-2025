% R bootcamp, Module 0: Recruit processing
% August 2023, UC Berkeley
% Chris Paciorek

TODO: add class(), typeof() from module 1

# A few administrative things

## Where to find stuff

This [website](https://berkeley-scf.github.io/r-bootcamp-fall-2023) and the associated GitHub site ([https://github.com/berkeley-scf/r-bootcamp-fall-2023](https://github.com/berkeley-scf/r-bootcamp-fall-2023)) is the main site for the bootcamp. It has information on logistics, software installation, and is the master repository for materials for the modules.

We have an [Ed Discussion site](https://edstem.org/us/courses/42488) for discussion and answering questions online during (and before) the bootcamp. 

If you have an administrative question before or after the bootcamp, email r-bootcamp@lists.berkeley.edu.

## Wireless

The campus WiFi is now eduroam, not AirBears. Follow [these instructions](https://berkeley.service-now.com/kb_view.do?sysparm_article=KB0013807) for how to set up your eduroam account. If you need wireless access as a guest (i.e., you don't have a CalNet ID), connect to 'CalVisitor'.

# How we'll operate

The bootcamp will be organized in modules, each of which will be a combination of lecture/demo presentation concluded by a breakout session in which you'll work on a variety of problems of different levels of difficulty. The idea is for each person to find problems that challenge them but are not too hard. Solutions to the breakout problems will be presented before the start of the next module. 

Many of the modules will use a common dataset as an example on which to carry out various operations. We'll focus on dataset of demographic/economic information (population, GDP per capita, life expectancy) for many of the countries in the world every five years, provided by the [Gapminder project](https://www.gapminder.org). (Note that this is almost the full population of countries -- I'll fit some statistical models but the interpretation is tricky as we are not working with a sample from a well-defined population.)

# Getting help

 - Counselors will be available to help answer any questions you have (just wave to one of them).
 - Or feel free to just ask the presenter during the presentation.
 - The counselors will also be monitoring the Ed Discussion site, so feel free to type in a question there and one of the counselors will answer the question. Or if you know the answer, help us out by answering it yourself or adding your thoughts. 

Your counseloRs are: Kenneth Chen (Statistics), Florica Constantine (Statistics), Will Torous (Statistics), and Austin Zane (Statistics).

# Suggestions on how to get the most out of the bootcamp

I encourage you to:

- try out the code as we walk through it
-  keep your eyes open! -- We'll illustrate a lot of syntax and concepts by example
- try to guess what the syntax means in cases we haven't yet seen that syntax
- play with it and try variations and try to break it and see what happens
- tell us if something interesting happens as you experiment, or post a comment in the chat room
- ask questions of me, the counselors, and on the Ed Discussion forum.

This is a bootcamp. So there may be some pain involved! If you find yourself not following everything, that's ok. You may miss some details, but try to follow the basics and the big picture. 

A few additional thoughts on my pedagogical philosophy here:

- I want to expose you to a lot of tools and ideas that you can come back to when you need them and when you have time for more depth.
- My aim is not to show you how to use specific statistical methods or analysis techniques. My goal is to get you up to speed generally in R.
- It can be hard to absorb everything in such a concentrated situation. Hopefully the material presented will be useful to you over the longer-term as you do more work with R.

# RStudio and R Markdown

We'll present most of the material from within RStudio, using R Markdown documents with embedded R code. R Markdown is an extension to the Markdown markup language that makes it easy to write HTML in a simple plain text format.  This allows us to both run the R code directly as well as compile on-the-fly to an HTML file that can be used for presentation. All files will be available on [GitHub](https://github.com/berkeley-scf/r-bootcamp-fall-2023).  

Note: The files named *moduleX_blah.html* have individual slides, while the files named *moduleX_blah_onepage.html* have the same content but all on one page.

Warning: in some cases the processing of the R code in the R Markdown is screwy and the slides have error messages that do not occur if you just run the code directly in R or RStudio. 

# Using GitHub to get the documents

To download the files from GitHub, you can do the following. 

## Within RStudio

Within RStudio go to File->New Project->Version Control->Git and enter:

- "Repository URL": https://github.com/berkeley-scf/r-bootcamp-fall-2023
- "Project Directory Name": r-bootcamp-fall-2023 (or something else of your choosing)
- "Directory": ~/Desktop (or somewhere of your choosing)

Then to update from the repository to get any changes we've made, you can select (from within RStudio):
Tools->Version Control->Pull Branches

or from the Environment/History/Git window, click on the Git tab and then on the blue down arrow.

Be warned that you probably do not want to make your own notes or changes to the files we are providing. Because if you do, and you then do a "Git Pull" to update the materials, you'll have to deal with the conflict between your local version and our version. You probably will want to make a personal copy of such files in another directory or by making copies of files with new names.

## From a Mac/Linux terminal window

Run the following commands:

- `cd /directory/where/you/want/repository/located`
- `git clone https://github.com/berkeley-scf/r-bootcamp-fall-2023`

Then to update from the repository to get any changes we've made:

- `cd /directory/where/you/put/the/repository/r-bootcamp-fall-2023`
- `git pull`

## As a zip file

If you don't want to bother using Git or have problems, simply download a zip file with all the material from [GitHub](https://github.com/berkeley-scf/r-bootcamp-fall-2023/archive/refs/heads/gh-pages.zip)

# What is R?

- R is an Open Source (and freely available) environment for statistical computing and graphics
- It is a full-featured programming language, in particular a scripting language (with similarities to Matlab and Python)
- It can be run interactively or as a batch/background job
- R is being actively developed with ongoing updates/new releases
- R has a variety of built-in as well as community-provided packages that extend its functionality with code and data; see [CRAN](https://cran.r-project.org/web/packages/index.html) for the thousands of add-on packages
- It is freely-available and modifiable 
- Available for Windows, Mac OS X, and [Linux](http://dilbert.com/strips/comic/1995-06-24/)


# Modes of using R

- Using the RStudio GUI, an 'integrated development environment'
- From the command line in a Linux/Mac terminal window
- Running an R script in the background on a Linux/Mac machine (Windows?)
- Using the Windows/Mac GUIs



# Starting R and RStudio

The pieces of an R session include:

- The R console
- Scripts containing your code
  - The script window also has Notebook capabilities like Jupyter notebooks
- Help files
- Graphics windows
- Workspace containing your objects, which hold data and information

RStudio provides an integrated development environment in which all of these pieces are in a single application and tightly integrated, with a built-in editor for your code/scripts. 

# Why R?

- R is widely used (statisticians, data scientists, scientists, social scientists) and has the widest statistical functionality of any software, and extensive machine learning functionality.
- Users add functionality via packages all the time
- R is free and available on all major platforms
- As a scripting language, R is very powerful, flexible, and easy to use
- As a scripting language, R allows for reproducibility and automating tasks
- As a language, R can do essentially anything
- Wide usage helps to improve quality and reduce bugs
- R can interact with other software, databases, the operating system, the web, etc.
- R is built on C and can call user-written and external C code and packages (in particular, see the *Rcpp* R package)

# Why Not R?

* Other software is better than R at various tasks
    
    - E.g., [Python](http://imgs.xkcd.com/comics/python.png) is very good for text manipulation, interacting with the operating system, and as a glue for tying together various applications/software in a workflow
    - And of course Python is the lingua franca for deep learning via Tensorflow and PyTorch.
* R can be much slower than compiled languages (but is often quite fast with good coding practices!)
* R's packages are only as good as the person who wrote them; no explicit quality control
* R is a sprawling and unstandardized ecosystem

# What are my other options? 

- Python
- Julia
- MATLAB
- C/C++
- SAS
- Stata

# My hidden agenda 

In addition to learning some R, this workshop will expose you to a way of thinking about doing your computational work. 

The building blocks of scientific computing include:

- scripting
- reproducibility
- automating repetitive tasks
- version control (note our basic use of Git)


# The Legal Stuff

- Some of this material was originally drawn from [Jared Knowles R bootcamp](http://jaredknowles.com/r-bootcamp/url).
- Contributions from Corrine Elliott, Dana Seidel, Kellie Ottoboni, Nima Hejazi, Rochelle Terman, Chris Krogslund, and Jarrod Millman. Thank you!!!
- You are free to use, modify and redistribute any of this material with or without attribution, but if you use chunks of material, I'd appreciate a call-out.

# Thanks!  

* To all the presenters and assistants.
* To the Statistics Department for sponsorship and logistical support.
* To Golden Bears Orientation (GBO) for making the room available to us.

# We want your feedback (even if you leave early)!

During the afternoon break tomorrow, we'll ask everyone to fill out a feedback form, but if you leave early, please follow [this link](https://forms.gle/xh6omJqMYciY3KNP8) or see the Ed Discussion board for the link.
% R bootcamp, Module 3: Working with objects and data
% August 2023, UC Berkeley
% Chris Paciorek

```{r chunksetup, include=FALSE} 
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(gapminder)
```

# Lists

Collections of disparate or complicated objects

```{r}
myList <- list(stuff = 3, mat = matrix(1:4, nrow = 2), 
   moreStuff = c("china", "japan"), list(5, "bear"))
myList
myList[[3]] # result is not (usually) a list (unless you have nested lists)
identical(myList[[3]], myList$moreStuff)
myList$moreStuff[2]
myList[[4]][[2]]
myList[1:3] # subset of a list is a list
myList$newOne <- 'more weird stuff'
names(myList)
```

Lists can be used as vectors of complicated objects. E.g., suppose you have a linear regression for each value of a stratifying variable. You could have a list of regression fits. Each regression fit will itself be a list, so you'll have a list of lists.

# Lists: quick quiz

**[P](https://www.polleverywhere.com/multiple_choice_polls/n6adK1IU7niikhA2ZgLNi)OLL 3A**: How would you extract "china" from this list?

(respond at [https://pollev.com/chrispaciorek428](https://pollev.com/chrispaciorek428))

```
myList <- list(stuff = 3, mat = matrix(1:4, nrow = 2), 
   moreStuff = c("china", "japan"), list(5, "bear"))
```

1) myList$moreStuff[1]
2) myList$moreStuff[[1]]
3) myList[[1]]
4) myList[[3]][2]
5) myList[[3]][1]
6) myList[3][1]
7) myList[['moreStuff']][1]


# Data frames

A review from Module 1...

- Data frames are combinations of vectors of the same length, but can be of different types
- Data frames are what is used for standard rectangular (record by field) datasets, similar to a spreadsheet
- Data frames are a functionality that both sets R aside from some languages (e.g., MATLAB) and provides functionality similar to some statistical packages (e.g., Stata, SAS)

```{r}
class(gapminder)
head(gapminder)
str(gapminder)
```

# Data frames are (special) lists!

```{r}
is.list(gapminder)
length(gapminder)
gapminder[[3]][1:5]
lapply(gapminder, class) 
```

`lapply()` is a function used on lists; it works here to apply the `class()` function to each element of the list, which in this case is each field/column.

# But lists are also vectors!

```{r}
length(gapminder)
someFields <- gapminder[c(3,5)]
head(someFields)
identical(gapminder[c(3,5)], gapminder[ , c(3,5)])
```

In general the placement of commas in R is crucial, but here, two different operations give the same result because of the underlying structure of data frames.

# Matrices 

If you need to do numeric calculations on an entire non-vector object (dimension > 1), you generally want to use matrices and arrays, not data frames.

- Matrices are two-dimensional collections of values of the same type
- We can have numeric, integer, character, or logical matrices, character matrices.
- You can't mix types within a matrix

```{r}
mat <- matrix(rnorm(12), nrow = 3, ncol = 4)
mat

# vectorized calcs work with matrices too
mat*4
mat <- cbind(mat, 1:3)
mat

# Let's convert the gapminder dataframe to a matrix:
gm_mat <- as.matrix(gapminder[ , c('lifeExp', 'gdpPercap')])
head(gm_mat)
```

# Matrices: quick quiz

**[P](https://www.polleverywhere.com/multiple_choice_polls/1jt7IHbQvXnaqRmUCGOru)OLL 3B**: Recall the gap dataframe has columns that are numeric and columns that are character strings. What do you think will happen if we do this:

```
as.matrix(gapminder)
```

(respond at [https://pollev.com/chrispaciorek428](https://pollev.com/chrispaciorek428))

1) it will convert to a matrix with no changes
2) all numeric columns will be converted to character strings
3) R will throw an error
4) all character columns will be converted to numeric values
5) R will drop some of the columns

# Arrays

Arrays are like matrices but can have more or fewer than two dimensions.
```{r}
arr <- array(rnorm(12), c(2, 3, 4))
arr
```

# Attributes

Objects have *attributes*.

```{r attr}
attributes(mat)
rownames(mat) <- c('first', 'middle', 'last')
mat
attributes(mat)

names(attributes(gapminder))
attributes(gapminder)$names
attributes(gapminder)$row.names[1:10]
```

Now let's do a bit of manipulation and see if you can infer how R represents matrices internally.

# Attributes: quick quiz

**[P](https://www.polleverywhere.com/multiple_choice_polls/YkHAsxssHtWqCQ9DGMDbo)OLL 3C**: Consider our matrix 'mat':

(respond at [https://pollev.com/chrispaciorek428](https://pollev.com/chrispaciorek428))

```
mat <- matrix(1:16, nrow = 4, ncol = 4)
     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16
```

Suppose I run this code: mat[4]

What do you think will be returned?

1) 13
2) 4
3) 13, 14, 15, 16
4) 4, 8, 12, 16
5) an error


```{r what_is_a_matrix, eval = FALSE}
mat[4]
attributes(mat) <- NULL
mat
is.matrix(mat)
```

**Question**: What can you infer about what a matrix is in R?

**Question**: What kind of object are the attributes themselves? How do I check?

# Matrices are stored column-major

This is like Fortran, MATLAB and Julia but not like C or Python(numpy). 

```{r}
mat <- matrix(1:12, 3, 4)
mat
vals <- c(mat)
```

You can go smoothly back and forth between a matrix (or an array) and a vector:
```{r}
identical(mat, matrix(vals, 3, 4))
identical(mat, matrix(vals, 3, 4, byrow = TRUE))
```

This is a common cause of bugs!


# Missing values and other special values

Since it was designed by statisticians, R handles missing values very well relative to other languages.

##  `NA` is a missing value

```{r, fig.cap = ""}
vec <- rnorm(12)
vec[c(3, 5)] <- NA
vec
length(vec)
sum(vec)
sum(vec, na.rm = TRUE)
hist(vec)
is.na(vec)
```
Be careful because many R functions won't warn you that they are ignoring the missing values.

##  To infinity and beyond
```{r}
big <- 1e500 
big
big + 7
```

##  `NaN` stands for Not a Number
```{r}
sqrt(-5)
big - big
1/0
```

##  `NULL`
```{r nulldata}
vec <- c(vec, NULL) 
vec
length(vec)
a <- NULL
a + 7
a[3, 4]
is.null(a)
myList <- list(a = 7, b = 5)
myList$a <- NULL  # works for data frames too
myList
```

`NA` can hold a place but `NULL` cannot.
`NULL` is useful for having a function argument default to 'nothing'. See `help(crossprod)`, which can compute either $X^{\top}X$ or $X^{\top}Y$.  

# Missing values: quick quiz

**POLL 3D**

(just respond in your head; I won't collect the answers online)

*Question 1*: Consider the following vector:

```
vec <- c(3, NA, 7)
```

What is vec[2]:

1) NA
2) 7

*Question 2*: Consider this vector:

```
vec <- c(3, NULL, 7)
```

What is vec[2]:

1) NULL
2) NA
3) 7
4) 3

*Question 3*: Consider this list:

```
mylist <- list(3, NULL, 7)
```

What is mylist[[2]]:

1) 7
2) NULL
3) NA
4) 3

*Question 4*: Consider this code:

```
mylist <- list(3, 5, 7)
mylist[[2]] <- NULL
```

What is length(mylist):

1) 3
2) 2
3) 1


# Logical vectors and boolean arithmetic

```{r}
gapminder2007 <- gapminder[gapminder$year == 2007, ]

wealthy <- gapminder2007$gdpPercap > 35000
healthy <- gapminder2007$lifeExp > 75

head(wealthy)
table(wealthy)

# note the vectorized boolean arithmetic
gapminder2007[wealthy & healthy, ]
gapminder2007[wealthy | healthy, ]
gapminder2007[wealthy & !healthy, ]

# what am I doing here?
sum(healthy)
mean(healthy)
```

**Question**: What do you think R is doing to do arithmetic on logical vectors?

# Converting between different types of objects

You can use the `as()` family of functions.

```{r}
ints <- 1:10
as.character(ints)
as.numeric(c('3.7', '4.8'))
```

Be careful: R tries to be helpful and convert between types/classes when it thinks it's a good idea. Sometimes it is overly optimistic. 

```{r}
indices <- c(1.7, 2.3)
ints[indices]
ints[0.999999999]
```
# Converting between different types: quick quiz

**POLL 3E**:

(just respond in your head; I won't collect the answers online)

*Question 1*: What do you think this will do?

```
ints <- 1:5
ints[0.9999]
```

1) return an error
2) return 1
3) return an empty vector

*Question 2*: What does the code do when it tries to use 0.9999 to subset?

1) round the 0.9999 to 1
2) truncate the 0.9999 to 0
3) return an error



# Factors
- A factor is a special data type in R used for categorical data. In some cases it works like magic and in others it is incredibly frustrating. 

```{r fac}
## let's read the Gapminder data from a file with a special argument:
gapminder <- read.csv(file.path('..', 'data', 'gapminder-FiveYearData.csv'),
          stringsAsFactors = TRUE) # This was the default before R 4.0
class(gapminder$continent)
head(gapminder$continent) # What order are the factors in?
levels(gapminder[["continent"]])  # note alternate way to get the variable
summary(gapminder$continent)
```

- What if we don't like the order these are in? Factor order is important for all kinds of things like plotting, analysis of variance, regression output, and more

# (Advanced) Ordering the Factor (optional)

- Ordered factors simply have an additional attribute explaining the order of the levels of a factor
- This is a useful shortcut when we want to preserve some of the meaning provided by the order
- Think ordinal data

This example is a bit artificial as 'continent' doesn't really have a natural ordering.

```{r orderedfac, fig.cap = ""}
gapminder$continent2 <- ordered(gapminder$continent, 
     levels = levels(gapminder$continent)[c(2,1,3,4,5)])

head(gapminder$continent2)
levels(gapminder$continent2)
boxplot(lifeExp ~ continent2, data = gapminder)
```

# (Advanced) Reclassifying Factors
- Turning factors into other data types can be tricky. All factors have an underlying numeric structure.

```{r fac2}
students <- factor(c('basic','proficient','advanced','basic', 
      'advanced', 'minimal'))
levels(students)
unclass(students)
```

- Hmmm, what happened?
- Be careful! The best way to convert a factor is to convert it to a character first.

```{r}
students <- factor(c('basic','proficient','advanced','basic', 
      'advanced', 'minimal'))
score = c(minimal = 65, basic = 75, advanced = 95, proficient = 85) # a named vector
score["advanced"]  # look up by name
students[3]
score[students[3]]
score[as.character(students[3])]
```

What went wrong and how did we fix it?  Notice how easily this could be a big bug in your code.

# Strings

R has lots of functionality for character strings. Usually these are stored as vectors of strings, each string of arbitrary length.

```{r}
chars <- c('hi', 'hallo', "mother's", 'father\'s', "He said, \"hi\"" )
length(chars)
nchar(chars)
paste("bill", "clinton", sep = " ")  # paste together a set of strings
paste(chars, collapse = ' ')  # paste together things from a vector

strsplit("This is the R bootcamp", split = " ")

countries <- as.character(gapminder2007$country)
substring(countries, 1, 3)
tmp <- countries
substring(tmp, 5, 10) <- "______"
tmp[1:20]
```
We can search for patterns in character vectors and replace patterns (both vectorized!)
```{r}
indexes <- grep("Korea", countries)
indexes
countries[indexes]
countries2 <- gsub("Korea, Dem. Rep.", "North Korea", countries)
countries2[indexes]
```

# Regular expressions (regex or regexp) (optional)

Some of you may be familiar with using *regular expressions*, which is functionality for doing sophisticated pattern matching and replacement with strings. *Python* and *Perl* are both used extensively for such text manipulation. 

R has a full set of regular expression capabilities available through the *grep()*, *gregexpr()*, and *gsub()* functions (among others - many R functions will work with regular expressions). However, a particularly nice way to make use of this functionality is to use the *stringr* package, which is more user-friendly than directly using the core R functions.

You can basically do any regular expression/string manipulations in R.

# Subsetting

There are many ways to select subsets in R. The syntax below is useful for vectors, matrices, data frames, arrays and lists.

```{r}
vec <- gapminder2007$lifeExp
mat <- matrix(1:20, 4, 5)
rownames(mat) <- letters[1:4]
mat
```
## 1) by direct indexing

```{r}
vec[c(3, 5, 12:14)]
vec[-c(3,5)]
gapminder[c(2,4), 5]
gapminder[c(2,4), 'lifeExp']

## Advanced: subset using a 2-column matrix of indices:
rowInd <- c(1, 3, 4)
colInd <- c(2, 2, 1)
elemInd <- cbind(rowInd, colInd)
elemInd
gapminder[elemInd]
```

## 2) by a vector of logicals

```{r}
wealthy <- gapminder$gdpPercap > 50000
gapminder$gdpPercap[wealthy]
gapminder[wealthy, ]
```

What happened in the last subsetting operation?

## 3) by a vector of names
```{r}
mat[c('a', 'd', 'a'), ]
```

## 4) using *subset()*

```{r}
subset(gapminder, gdpPercap > 50000)
```

## 5) using *dplyr* tools such as *filter()* and *select()* -- more in Module 6

# Assignment into subsets

We can assign into subsets by using similar syntax, as we saw with vectors.

```{r}
vec <- rnorm(20)
vec[c(3, 5, 12:14)] <- 1:5
vec

mat <- matrix(rnorm(6*5), nrow = 6)
mat[2, 3:5] <- rnorm(3)
mat
mat[mat[,1] > 0, ] <- -Inf
mat
```

# Subsetting: quick quiz

**[P](https://www.polleverywhere.com/multiple_choice_polls/fFm9QlOQDGRz0pJZklyV2)OLL 3F**: Suppose I want to select the 3rd elements from the 2nd and 4th columns of a matrix or dataframe. Which syntax will work?

(respond at [https://pollev.com/chrispaciorek428](https://pollev.com/chrispaciorek428))

Here's a test matrix:

```
mat <- matrix(1:16, nrow = 4, ncol = 4)
```

1) mat[3, (2, 4)]
2) mat[c(FALSE, FALSE, TRUE, FALSE), c(FALSE, TRUE, FALSE, TRUE)]
3) mat[c(FALSE, FALSE, TRUE, FALSE), c(2, 4)]
4) mat[3, c(2, 4)]
5) mat(3, c(2, 4))
6) mat[3, ][c(2, 4)]
7) mat[ , c(2, 4)][3, ]
8) mat[ , c(2, 4)][3]
9) mat[c(2, 4)][3, ]

**POLL 3F**: (Advanced) One of those answers won't work with a matrix but will work with a dataframe. Which one?

1) mat[3, (2, 4)]
2) mat[c(FALSE, FALSE, TRUE, FALSE), c(FALSE, TRUE, FALSE, TRUE)]
3) mat[c(FALSE, FALSE, TRUE, FALSE), c(2, 4)]
4) mat[3, c(2, 4)]
5) mat(3, c(2, 4))
6) mat[3, ][c(2, 4)]
7) mat[ , c(2, 4)][3, ]
8) mat[ , c(2, 4)][3]
9) mat[c(2, 4)][3, ]




# Breakout

### Basics

1) Extract the 5th row from the gapminder dataset.

2) Extract the last row from the gapminder dataset. 

3) Count the number of gdpPercap values greater than 50000 in the gapminder dataset.

4) Set all of the gdpPercap values greater than 50000 to NA. You should probably first copy the `gapminder` object and work on the copy so that the dataset is unchanged, so that you preserve the original data to use later.

5) Consider the first row of the gapminder dataset, which has Afghanistan for 1952. How do I create a string "Afghanistan-1952" using `gap$country[1]` and `gap$year[1]`? 

### Using the ideas

6) Create a character string using `paste()` that tells the user how many rows there are in the data frame - do this programmatically such that it would work for any data frame regardless of how many rows it has. The result should look like this: "There are 1704 rows in the dataset"

7) If you didn't do it this way already in problem #2, extract the last row from the gapminder dataset without typing the number '1704'.

8) Create a boolean vector indicating if the life expectancy is greater than 75 and the gdpPercap is less than 10000 and calculate the proportion of all the records these represent.

9) Use that vector to create a new data frame that is a subset of the original data frame.

10) Consider the attributes of the gapminder dataset. What kind of R object is the set of attributes?

### Advanced

11) Create row names for the data frame based on concatenating the Continent, Country, and Year fields.
