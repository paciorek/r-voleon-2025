[
  {
    "objectID": "units/intro.html",
    "href": "units/intro.html",
    "title": "Basic Introduction to R Syntax",
    "section": "",
    "text": "R as a calculator\nThe syntax for doing interactive calculations in R is similar to other languages such as Python, MATLAB, and Julia, though some of the operators differ.\nHere are some examples that you should be able to replicate yourself in a plain R session or in the console/command window of RStudio. The console window will by default be the left (or perhaps lower left) window pane when you start RStudio.\n\n\nCode\n2 + 2 # add numbers\n\n\n[1] 4\n\n\nCode\n2 * pi # multiply by a constant\n\n\n[1] 6.283185\n\n\nCode\n7 + runif(1) # add a random number\n\n\n[1] 7.596921\n\n\nCode\n3^4 # powers\n\n\n[1] 81\n\n\nCode\nsqrt(4^4) # functions\n\n\n[1] 16\n\n\nCode\nlog(10)\n\n\n[1] 2.302585\n\n\nCode\nlog(100, base = 10)\n\n\n[1] 2\n\n\nCode\n23 %/% 2 \n\n\n[1] 11\n\n\nCode\n23 %% 2\n\n\n[1] 1\n\n\nCode\n# scientific notation\n5000000000 * 1000\n\n\n[1] 5e+12\n\n\nCode\n5e9 * 1e3\n\n\n[1] 5e+12\n\n\nThink of a mathematical operation you need - can you guess how to do it in R?\nSide note to presenter: turn off R Notebook inline view via RStudio -&gt; Preferences -&gt; R Markdown -&gt; Show output inline …\n\n\n\n\n\n\nQuestion\n\n\n\nHow do I calculate the cosine of 2 pi?\n\ncosine(2pi)\ncosine(2*pi)\ncos(2 * pi)\ncos(2 x pi)\ncos(2*pi)\ncos(2 * 3.14159)\ncos[2*pi]\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nThe function name is cos not cosine.\nA function call specifies the arguments in parentheses (), not brackets [].\nSpaces don’t generally matter (there are exceptions).\npi is an object in the R language.\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat happens if you do this?\n\n\nCode\ncos(2*pi\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince we didn’t enter the closing parenthesis, R is waiting for additional input with the “continuation” prompt of +.\nYou can either enter the missing syntax or hit Ctrl-C or esc to kill the partial syntax and return to the usual prompt.\n\n\n\n\n\nAssigning values to R objects\nA key action in R (similar to other languages) is to store values in the form of R objects, and to examine the value of R objects.\n\n\nCode\nval &lt;- 3\nval\n\n\n[1] 3\n\n\nCode\nprint(val)\n\n\n[1] 3\n\n\nCode\nVal &lt;- 7 # case-sensitive!\nprint(val)\n\n\n[1] 3\n\n\nCode\nprint(Val)\n\n\n[1] 7\n\n\nHere is some other syntax to create objects.\n\n\nCode\nmySeq &lt;- 1:6\nmySeq\n\n\n[1] 1 2 3 4 5 6\n\n\nCode\nyears &lt;- seq(1952, 2007, by = 5)\nyears\n\n\n [1] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 2002 2007\n\n\nCode\nlength(years)\n\n\n[1] 12\n\n\nCode\n## This is a comment: here is an example of non-numeric data\ncountry &lt;- rep(\"Afghanistan\", 12)\ncountry \n\n\n [1] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n [6] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n[11] \"Afghanistan\" \"Afghanistan\"\n\n\nR gives us a lot of flexibility (within certain rules) for assigning to (parts of) objects from (parts of) other objects. We’ll see this through the bootcamp.\n\n\nVectors in R\nThe most basic form of an R object is a vector (i.e., a 1-dimensional array). The various objects mySeq, years, country are all vectors.\nIn fact, individual (scalar) values are vectors of length one, so val and Val from above are also vectors.\nWe can concatenate values into a vector with c().\n\n\nCode\n## numeric vector\nnums &lt;- c(1.1, 3, -5.7)\ndevs &lt;- rnorm(5)   # Five random normal values.\ndevs\n\n\n[1]  0.7800960 -0.9564083 -0.7635149 -1.0119515 -1.3943025\n\n\nThis is not valid syntax in R. Let’s try it and see what happens.\n\n\nCode\nnums &lt;- (1.1, 3, -5.7)\nnums &lt;- [1.1, 3, -5.7]\n\n\n\n\nWorking with indices and subsets\nWe can subset (aka “slice”) using a variety of approaches.\n\n\nCode\nvals &lt;- 1:12\n\nvals[3]\n\n\n[1] 3\n\n\nCode\nvals[3:5]\n\n\n[1] 3 4 5\n\n\nCode\nvals[c(1, 3, 6)]\n\n\n[1] 1 3 6\n\n\nCode\nvals[-c(1, 3, 6)]\n\n\n[1]  2  4  5  7  8  9 10 11 12\n\n\nCode\nvals[c(rep(TRUE, 3), rep(FALSE, 2), TRUE, rep(FALSE, 6))]\n\n\n[1] 1 2 3 6\n\n\nWe can substitute values into vectors:\n\n\nCode\nvals[4] &lt;- 822.9711\nvals[3:4] &lt;- c(7.5, 2.4)\nvals[2:4] &lt;- 0  # Recycling\n\n\nThe last substutition uses “recycling” to match the left-hand-side extent (3 elements) with the right-hand-side extent (1 element)\n\n\n\n\n\n\nQuestion\n\n\n\nWhich of these will work to extract a subset of a vector? Assume the vector is created like this:\nvals &lt;- rnorm(4)\n\nvals[3]\nvals[2,3]\nvals[c(2,3)]\nvals(2,3)\nvals[c(FALSE, TRUE, TRUE, FALSE)]\nvals[c(f,t,t,f)]\nvals(3)\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nSubsetting uses square brackets so (4) and (7) don’t work.\nTo create a set of indices to use in subsetting/slicing, you need to use c(), so (3) and (5) work.\nBooleans in R use the canonical syntax of TRUE and FALSE, so (5) works but not (6).\n\n\n\n\n\n\nUsing functions in R\n\nFunctions generally take arguments, some of which are often optional:\n\n\n\nCode\nlog(10)\n\n\n[1] 2.302585\n\n\nCode\nlog(10, base = 10)\n\n\n[1] 1\n\n\n\nWe can embed function calls:\n\n\n\nCode\nhist(rnorm(1000))\n\n\n\n\n\nA histogram\n\n\n\n\n\nWe can (usually) see the code of a function:\n\n\n\nCode\nlm\n\n\nfunction (formula, data, subset, weights, na.action, method = \"qr\", \n    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n    contrasts = NULL, offset, ...) \n{\n    ret.x &lt;- x\n    ret.y &lt;- y\n    cl &lt;- match.call()\n    mf &lt;- match.call(expand.dots = FALSE)\n    m &lt;- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\", \n        \"offset\"), names(mf), 0L)\n    mf &lt;- mf[c(1L, m)]\n    mf$drop.unused.levels &lt;- TRUE\n    mf[[1L]] &lt;- quote(stats::model.frame)\n    mf &lt;- eval(mf, parent.frame())\n    if (method == \"model.frame\") \n        return(mf)\n    else if (method != \"qr\") \n        warning(gettextf(\"method = '%s' is not supported. Using 'qr'\", \n            method), domain = NA)\n    mt &lt;- attr(mf, \"terms\")\n    y &lt;- model.response(mf, \"numeric\")\n    w &lt;- as.vector(model.weights(mf))\n    if (!is.null(w) && !is.numeric(w)) \n        stop(\"'weights' must be a numeric vector\")\n    offset &lt;- model.offset(mf)\n    mlm &lt;- is.matrix(y)\n    ny &lt;- if (mlm) \n        nrow(y)\n    else length(y)\n    if (!is.null(offset)) {\n        if (!mlm) \n            offset &lt;- as.vector(offset)\n        if (NROW(offset) != ny) \n            stop(gettextf(\"number of offsets is %d, should equal %d (number of observations)\", \n                NROW(offset), ny), domain = NA)\n    }\n    if (is.empty.model(mt)) {\n        x &lt;- NULL\n        z &lt;- list(coefficients = if (mlm) matrix(NA_real_, 0, \n            ncol(y)) else numeric(), residuals = y, fitted.values = 0 * \n            y, weights = w, rank = 0L, df.residual = if (!is.null(w)) sum(w != \n            0) else ny)\n        if (!is.null(offset)) {\n            z$fitted.values &lt;- offset\n            z$residuals &lt;- y - offset\n        }\n    }\n    else {\n        x &lt;- model.matrix(mt, mf, contrasts)\n        z &lt;- if (is.null(w)) \n            lm.fit(x, y, offset = offset, singular.ok = singular.ok, \n                ...)\n        else lm.wfit(x, y, w, offset = offset, singular.ok = singular.ok, \n            ...)\n    }\n    class(z) &lt;- c(if (mlm) \"mlm\", \"lm\")\n    z$na.action &lt;- attr(mf, \"na.action\")\n    z$offset &lt;- offset\n    z$contrasts &lt;- attr(x, \"contrasts\")\n    z$xlevels &lt;- .getXlevels(mt, mf)\n    z$call &lt;- cl\n    z$terms &lt;- mt\n    if (model) \n        z$model &lt;- mf\n    if (ret.x) \n        z$x &lt;- x\n    if (ret.y) \n        z$y &lt;- y\n    if (!qr) \n        z$qr &lt;- NULL\n    z\n}\n&lt;bytecode: 0x63a9187ee9b8&gt;\n&lt;environment: namespace:stats&gt;\n\n\n\n\nGetting help about a function\nTo get information about a function you know exists, use help or ?, e.g., ?lm.\n\n\nCode\nhelp(lm)\n?lm\n\n?log\n\n\n\n\nHow to be lazy\nIf you’re starting to type something you’ve typed before, or the long name of an R object or function, STOP! You likely don’t need to type all of that.\n\nTab completion\nCommand history\n\nup/down arrows\nCtrl-{up arrow} or Command-{up arrow}\n\nRStudio: select a line or block for execution\nFor keyboard shortcuts in RStudio see:\n\nTools -&gt; Keyboard Shortcuts Help or\nthis and this blog posts.\n\nOther tips for saving time in RStudio and R Markdown\n\n\n\nManaging the workspace\nR has functions for learning about the collection of objects in your workspace. Some of this is built in to RStudio (see the Enviornment tab in upper right pane).\n\n\nCode\n## Let's first create a few objects\nx &lt;- rnorm(5)\ny &lt;- c(5L, 2L, 7L)\nz &lt;- list(a = 3, b = c('sam', 'yang'))\nls()  # search the user workspace (global environment)\n\n\n [1] \"country\"       \"denslines\"     \"densplot\"      \"devs\"         \n [5] \"dim2\"          \"f.dplot\"       \"f.ess\"         \"f.ess.old\"    \n [9] \"f.flushplot\"   \"f.gm\"          \"f.grstat\"      \"f.identity\"   \n[13] \"f.invlogit\"    \"f.logit\"       \"f.lonlat2eucl\" \"f.merge\"      \n[17] \"f.sort\"        \"f.sort2\"       \"f.trimat\"      \"f.vecrep\"     \n[21] \"format_bytes\"  \"getNcdf\"       \"im\"            \"indices\"      \n[25] \"ln\"            \"lnm\"           \"ls_sizes\"      \"makePoly\"     \n[29] \"mySeq\"         \"nums\"          \"pmap\"          \"pmap2\"        \n[33] \"pointsInPoly\"  \"pplot\"         \"print.quitter\" \"q\"            \n[37] \"R2\"            \"rcsv\"          \"temp.colors\"   \"thresh\"       \n[41] \"time_chol\"     \"tplot\"         \"tsplot\"        \"val\"          \n[45] \"Val\"           \"vals\"          \"wcsv\"          \"x\"            \n[49] \"y\"             \"years\"         \"z\"            \n\n\nCode\nrm(x)    # delete a variable\nls()\n\n\n [1] \"country\"       \"denslines\"     \"densplot\"      \"devs\"         \n [5] \"dim2\"          \"f.dplot\"       \"f.ess\"         \"f.ess.old\"    \n [9] \"f.flushplot\"   \"f.gm\"          \"f.grstat\"      \"f.identity\"   \n[13] \"f.invlogit\"    \"f.logit\"       \"f.lonlat2eucl\" \"f.merge\"      \n[17] \"f.sort\"        \"f.sort2\"       \"f.trimat\"      \"f.vecrep\"     \n[21] \"format_bytes\"  \"getNcdf\"       \"im\"            \"indices\"      \n[25] \"ln\"            \"lnm\"           \"ls_sizes\"      \"makePoly\"     \n[29] \"mySeq\"         \"nums\"          \"pmap\"          \"pmap2\"        \n[33] \"pointsInPoly\"  \"pplot\"         \"print.quitter\" \"q\"            \n[37] \"R2\"            \"rcsv\"          \"temp.colors\"   \"thresh\"       \n[41] \"time_chol\"     \"tplot\"         \"tsplot\"        \"val\"          \n[45] \"Val\"           \"vals\"          \"wcsv\"          \"y\"            \n[49] \"years\"         \"z\"            \n\n\nCode\nls.str() # list and describe variables\n\n\ncountry :  chr [1:12] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\ndenslines : function (psi, const = 1.06, minval = -Inf, ...)  \ndensplot : function (psi, const = 1.06, xlab = \"\", ylim = NULL, yax = \"auto\", ...)  \ndevs :  num [1:5] 0.78 -0.956 -0.764 -1.012 -1.394\ndim2 : function (x)  \nf.dplot : function (psi, xlab = \"\", normal = FALSE, const = 1.06, yax = \"auto\", quantiles = TRUE, \n    ...)  \nf.ess : function (vec)  \nf.ess.old : function (vec, lmax, threshold = 0.05)  \nf.flushplot : function (x, y, xlab = \"\", ylab = \"\", type = \"l\", ...)  \nf.gm : function (vec)  \nf.grstat : function (mat)  \nf.identity : function (vals)  \nf.invlogit : function (vals)  \nf.logit : function (vals)  \nf.lonlat2eucl : function (lonlat, ctr = NULL, miles = FALSE)  \nf.merge : function (x, y, ...)  \nf.sort : function (dataframe, sortby = 1, decreasing = FALSE)  \nf.sort2 : function (data.frame, ...)  \nf.trimat : function (size, offdiag, diags)  \nf.vecrep : function (vec, numreps = 1)  \nformat_bytes : function (x)  \ngetNcdf : function (fileName, varid = \"pr\")  \nim : function (g, nr)  \nindices : function (trueVec)  \nln : function (end = \"dev\")  \nlnm : function (end = \"dev\")  \nls_sizes : function (name = parent.frame(), pretty = T, top = 10, ...)  \nmakePoly : function ()  \nmySeq :  int [1:6] 1 2 3 4 5 6\nnums :  num [1:3] 1.1 3 -5.7\npmap : function (y, x, nr = 80, nc = 80, xlab = \"\", ylab = \"\", col = tim.colors(32), \n    ...)  \npmap2 : function (y, x, xlab = \"\", ylab = \"\", col = tim.colors(32), zlim = NULL, \n    shrink = 0.9, cex = 0.7, pch = 19, min = NULL, max = NULL, ...)  \npointsInPoly : function (point.coords, vertices)  \npplot : function (x, y, ..., transparency = FALSE)  \nprint.quitter : function (x)  \nq :  list()\nR2 : function (vals, preds)  \nrcsv : function (file, header = T)  \ntemp.colors : function (n = 25)  \nthresh : function (vec, up = NULL, lo = NULL)  \ntime_chol : function (n)  \ntplot : function (objName, which = NULL, col = NULL)  \ntsplot : function (vec, ...)  \nval :  num 3\nVal :  num 7\nvals :  num [1:12] 1 0 0 0 5 6 7 8 9 10 ...\nwcsv : function (obj, file, header = T)  \ny :  int [1:3] 5 2 7\nyears :  num [1:12] 1952 1957 1962 1967 1972 ...\nz : List of 2\n $ a: num 3\n $ b: chr [1:2] \"sam\" \"yang\"\n\n\n\n\nSaving and reloading the workspace\nFinally we can save the objects in our R session for later use (or to give to someone else):\n\n\nCode\nls()\n\n\n [1] \"country\"       \"denslines\"     \"densplot\"      \"devs\"         \n [5] \"dim2\"          \"f.dplot\"       \"f.ess\"         \"f.ess.old\"    \n [9] \"f.flushplot\"   \"f.gm\"          \"f.grstat\"      \"f.identity\"   \n[13] \"f.invlogit\"    \"f.logit\"       \"f.lonlat2eucl\" \"f.merge\"      \n[17] \"f.sort\"        \"f.sort2\"       \"f.trimat\"      \"f.vecrep\"     \n[21] \"format_bytes\"  \"getNcdf\"       \"im\"            \"indices\"      \n[25] \"ln\"            \"lnm\"           \"ls_sizes\"      \"makePoly\"     \n[29] \"mySeq\"         \"nums\"          \"pmap\"          \"pmap2\"        \n[33] \"pointsInPoly\"  \"pplot\"         \"print.quitter\" \"q\"            \n[37] \"R2\"            \"rcsv\"          \"temp.colors\"   \"thresh\"       \n[41] \"time_chol\"     \"tplot\"         \"tsplot\"        \"val\"          \n[45] \"Val\"           \"vals\"          \"wcsv\"          \"y\"            \n[49] \"years\"         \"z\"            \n\n\nCode\nsave.image('intro.Rda')\nrm(list = ls())\nls()\n\n\ncharacter(0)\n\n\nCode\nload('intro.Rda') \n# the result of this may not be quite right in the slide version\nls()\n\n\n [1] \"country\"       \"denslines\"     \"densplot\"      \"devs\"         \n [5] \"dim2\"          \"f.dplot\"       \"f.ess\"         \"f.ess.old\"    \n [9] \"f.flushplot\"   \"f.gm\"          \"f.grstat\"      \"f.identity\"   \n[13] \"f.invlogit\"    \"f.logit\"       \"f.lonlat2eucl\" \"f.merge\"      \n[17] \"f.sort\"        \"f.sort2\"       \"f.trimat\"      \"f.vecrep\"     \n[21] \"format_bytes\"  \"getNcdf\"       \"im\"            \"indices\"      \n[25] \"ln\"            \"lnm\"           \"ls_sizes\"      \"makePoly\"     \n[29] \"mySeq\"         \"nums\"          \"pmap\"          \"pmap2\"        \n[33] \"pointsInPoly\"  \"pplot\"         \"print.quitter\" \"q\"            \n[37] \"R2\"            \"rcsv\"          \"temp.colors\"   \"thresh\"       \n[41] \"time_chol\"     \"tplot\"         \"tsplot\"        \"val\"          \n[45] \"Val\"           \"vals\"          \"wcsv\"          \"y\"            \n[49] \"years\"         \"z\"            \n\n\n\n\nPackages\nLet’s check out the packages on CRAN. In particular check out the CRAN Task Views.\nEssentially any well-established and many not-so-established statistical methods and other functionality is available in a package.\nIf you want to sound like an R expert, make sure to call them packages and not libraries. A library is the location in the directory structure where the packages are installed/stored.\n\n\nUsing packages\nTwo steps (similar to Python and Julia):\n\nInstall the package on your machine\n\none-time only - the package will be a set of files in the filesystem\n\nLoad the package\n\nevery time you start R and need to use a given package - the package will be loaded into memory\n\n\nTo install a package, in RStudio, just do Packages-&gt;Install Packages.\nFrom the command line, you generally will just do\n\n\nCode\ninstall.packages('gapminder') \n\n\nIf you’re on a network and are not the administrator of the machine, you may need to explicitly tell R to install it in a directory you are able to write in:\n\n\nCode\ninstall.packages('gapminder', lib = file.path('~', 'R'))\n\n\nIf you’re using R directly installed on your laptop, now would be a good point to install the various packages we need for the bootcamp, which can be done easily with the following command:\n\n\nCode\ninstall.packages(c('chron','colorspace','codetools', 'DBI','devtools',\n                   'dichromat','digest','doFuture','dplyr', 'fields',\n                   'foreach','future.apply', 'gapminder', 'ggplot2',\n                   'gridExtra','gtable','inline','iterators','knitr',\n                   'labeling','lattice','lme4','mapproj','maps','munsell',\n                   'proftools','proto','purrr','R6','rbenchmark',\n                   'RColorBrewer','Rcpp','reshape2','rJava',\n                   'RSQLite', 'scales','spam','stringr','tidyr','xlsx',\n                   'xlsxjars','xtable'))\n\n\nNote that packages often are dependent on other packages so these dependencies may be installed and loaded automatically. E.g., fields depends on maps and on spam.\n\n\nGeneral information about a package\nYou can use syntax as follows to get a list of the objects in a package and a brief description:\n\n\nCode\nlibrary(help = packageName)\n\n\nOn CRAN there often vignettes that are an overview and describe usage of a package if you click on a specific package. The reference manual is just a single document with the help files for all of the objects/functions in a package, so may be helpful but often it’s hard to get the big picture view from that.\n\n\nThe working directory\nTo read and write from R, you need to have a firm grasp of where in the computer’s filesystem you are reading and writing from.\n\n\nCode\n## What directory does R look for files in (working directory)?\ngetwd()\n\n## Changing the working directory (Linux/Mac specific)\nsetwd('~/Desktop') # change the working directory\nsetwd('/Users/paciorek/Desktop') # absolute path (here on MacOS)\ngetwd()\nsetwd('r-voleon-2025/units') # relative path\nsetwd('../tmp') # relative path, up and back down the tree\n\n## Changing the working directory (Windows specific)\n## Windows - use either \\\\ or / to indicate directories\n# setwd('C:\\\\Users\\\\Your_username\\\\Desktop\\\\r-voleon-2025')\n# setwd('..\\\\r-voleon-2025')\n\n## Changing the working directory (platform-agnostic)\nsetwd(file.path('~', 'Desktop', 'r-voleon-2025', 'modules')) # change the working directory\nsetwd(file.path('/', 'Users', 'paciorek', 'Desktop', 'r-voleon-2025', 'modules')) # absolute path\ngetwd()\nsetwd(file.path('..', 'data')) # relative path\n\n\nMany errors and much confusion result from you and R not being on the same page in terms of where in the directory structure you are.\nIn RStudio, you can use Session -&gt; Set Working Directory instead of setwd.\n\n\nWriting functions\nHere’s the syntax for writing our own function.\n\n\nCode\nadd_constant &lt;- function(x, constant = 0) {\n   result &lt;- x + constant\n   return(result)\n}\n\nadd_constant(7)\nadd_constant(7, 5)\n\nadd_constant(1:6, 5)\n\n\n\n\n\nFunction arguments\nR can match arguments by name (when provided) or by position (the fall-back). It also allows one to specify default values so that the user doesn’t have to explicitly provide all the arguments.\n\n\nCode\nlog(100)\n\n\n[1] 4.60517\n\n\nCode\nlog(100, base = 10)\n\n\n[1] 2\n\n\nCode\nlog(100, 10)\n\n\n[1] 2\n\n\nCode\nlog(base = 10, 100)\n\n\n[1] 2\n\n\nCode\nlog(base = 10, x = 100)\n\n\n[1] 2\n\n\n\n\nBranching (if-then-else syntax)\nOften we need our code to do different things depending on whether some condition is true or false.\nHere’s a simple example to illustrate the syntax. Note that the then is implicit.\n\n\nCode\nval &lt;- rnorm(1)\nval\n\n\n[1] 0.9555907\n\n\nCode\nif (val &lt; 0) {\n  print(\"val is negative\")\n} else {\n  print(\"val is positive\")\n}\n\n\n[1] \"val is positive\"\n\n\nWe can chain together if statements as follows.\n\n\nCode\nval &lt;- rnorm(1)\nval\n\n\n[1] 0.6041237\n\n\nCode\nif (val &lt; -1) {\n  print(\"val is more than one standard deviation below the mean.\")\n} else if (abs(val) &lt;= 1) {\n  print(\"val is within one standard deviation of the mean.\")\n} else {\n  print(\"val is more than one standard deviation above the mean.\")\n}\n\n\n[1] \"val is within one standard deviation of the mean.\"\n\n\nIn general, the { brackets are only needed if you have multiple R expressions, but R will complain when an else starts a line of code, so generally using the { is good practice. That said, this works just fine:\n\n\nCode\nif (val &lt; 0) print(\"val is negative\") else print(\"val is positive\")\n\n\n[1] \"val is positive\"\n\n\n\n\nLoops\nIn many languages, looping (for loops, while loops, etc.) is one of the main constructs used to carry out computation. Loops are not emphasized as much in R, both because they can be slow and because other syntax (vectorized calls, lapply, etc.) is often cleaner, as we’ll see in a later module.\nBut there are lots of times when using a loop does make sense.\nMost of you are probably familiar at least with the basic idea of iterating through a series of steps. A for loop iterates through a pre-determined number of iterations, while a while loop iterates until some condition is met. For loops are more common in R, but while loops can be handy particularly for things like optimization.\nHere’s some example syntax.\n\n\nCode\nx &lt;- rnorm(50)\ncnt_neg &lt;- 0\nfor(i in seq_along(x)) {\n    if(x[i] &lt; 0) {\n       x[i] &lt;- 0\n       cnt_neg &lt;- cnt_neg + 1\n    }\n}\ncat(\"Found \", cnt_neg, \" negative values.\\n\")\n\n\nFound  22  negative values.\n\n\nThat said, the canonical way to do that in R is via vectorized operation:\n\n\nCode\nx[x &lt; 0] &lt;- 0\nx\n\n\n [1] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 1.3968790008\n [6] 0.0000000000 0.0000000000 0.9890744897 1.0813694976 0.4411866190\n[11] 0.8400313065 0.9261492424 1.0029021889 0.0042857399 0.7297920102\n[16] 0.0000000000 1.4003350342 0.0000000000 0.0000000000 0.0000000000\n[21] 1.3025422408 0.0005907293 0.0000000000 0.0000000000 0.0000000000\n[26] 0.7597973786 0.3418620862 0.0000000000 0.2712318391 0.4744158289\n[31] 0.9472185009 0.4962290745 1.3117309970 0.0000000000 0.2449194719\n[36] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0605510057\n[41] 1.0299617494 0.7959645527 0.9183654975 0.1343611725 0.0615631770\n[46] 0.0000000000 0.6262779213 0.7454730848 0.0000000000 0.0000000000\n\n\n\n\nWhile loop\nIt’s not a particularly interesting example, but we can see the while loop syntax in the same example. In this case\n\n\nCode\nfound &lt;- FALSE\ni &lt;- 1\nwhile(!found && i &lt;= length(vals)) {\n     if(x[i] &gt; 3) {\n       print(x[i])\n       found &lt;- TRUE\n     }\n     i &lt;- i+1\n}\n\n\n\n\nBreakout\nHere are some questions to get some practice with the syntax.\nIn general, your answers to any questions should involve writing code to manipulate objects. For example, if I ask you to find the maximum life expectancy, do not scan through all the values and find it by eye. Use R to do the calculations and print results.\n\nBasics\n\nCreate a variable called ‘x’ that contains the mean of 100 random uniform numbers.\nUse functions in R to round ‘x’ to two decimal places and to two significant digits.\nMake sure you are able to install packages from CRAN. E.g., try to install lmtest.\nFigure out what your current working directory is.\nPut the data/cpds.csv file in some other directory on your computer, such as Downloads. Use setwd() to set your working directory to be that directory. Read the file in using read.csv(). Now use setwd() to point to a different directory such as Desktop. Write the data frame out to a file using write.csv. You may also want to experiment with figuring out how to write it out without any row names and without quotes on the character strings.\nWrite an R function that will take an input vector and set any negative values in the vector to zero.\nWrite an R function that will take an input vector and set any value below a threshold to be the value of threshold. Optionally, the function should instead set values above a threshold to the value of the threshold.",
    "crumbs": [
      "Modules",
      "Basic Introduction (Module \"0\")"
    ]
  }
]